<?xml version="1.0" encoding="utf-8"?>
<xs:schema id="DataSet1" targetNamespace="http://tempuri.org/DataSet1.xsd" xmlns:mstns="http://tempuri.org/DataSet1.xsd" xmlns="http://tempuri.org/DataSet1.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" xmlns:msprop="urn:schemas-microsoft-com:xml-msprop" attributeFormDefault="qualified" elementFormDefault="qualified">
  <xs:annotation>
    <xs:appinfo source="urn:schemas-microsoft-com:xml-msdatasource">
      <DataSource DefaultConnectionIndex="0" FunctionsComponentName="QueriesTableAdapter" Modifier="AutoLayout, AnsiClass, Class, Public" SchemaSerializationMode="IncludeSchema" xmlns="urn:schemas-microsoft-com:xml-msdatasource">
        <Connections>
          <Connection AppSettingsObjectName="Settings" AppSettingsPropertyName="TestDBConnectionString" ConnectionStringObject="" IsAppSettingsProperty="true" Modifier="Assembly" Name="TestDBConnectionString (Settings)" ParameterPrefix="@" PropertyReference="ApplicationSettings.ConsoleApp.Properties.Settings.GlobalReference.Default.TestDBConnectionString" Provider="System.Data.SqlClient" />
        </Connections>
        <Tables>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="TestTableTableAdapter" GeneratorDataComponentClassName="TestTableTableAdapter" Name="TestTable" UserDataComponentName="TestTableTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="TestDBConnectionString (Settings)" DbObjectName="TestDB.dbo.TestTable" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[TestTable] WHERE (([PK1] = @Original_PK1) AND ([PK2] = @Original_PK2) AND ((@IsNull_Value = 1 AND [Value] IS NULL) OR ([Value] = @Original_Value)))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_PK1" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="PK1" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_PK2" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="PK2" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_Value" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="Value" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="AnsiString" Direction="Input" ParameterName="@Original_Value" Precision="0" ProviderType="VarChar" Scale="0" Size="0" SourceColumn="Value" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[TestTable] ([PK1], [PK2], [Value]) VALUES (@PK1, @PK2, @Value);
SELECT PK1, PK2, Value FROM TestTable WHERE (PK1 = @PK1) AND (PK2 = @PK2)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@PK1" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="PK1" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@PK2" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="PK2" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="AnsiString" Direction="Input" ParameterName="@Value" Precision="0" ProviderType="VarChar" Scale="0" Size="0" SourceColumn="Value" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT PK1, PK2, Value FROM dbo.TestTable</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[TestTable] SET [PK1] = @PK1, [PK2] = @PK2, [Value] = @Value WHERE (([PK1] = @Original_PK1) AND ([PK2] = @Original_PK2) AND ((@IsNull_Value = 1 AND [Value] IS NULL) OR ([Value] = @Original_Value)));
SELECT PK1, PK2, Value FROM TestTable WHERE (PK1 = @PK1) AND (PK2 = @PK2)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@PK1" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="PK1" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@PK2" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="PK2" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="AnsiString" Direction="Input" ParameterName="@Value" Precision="0" ProviderType="VarChar" Scale="0" Size="0" SourceColumn="Value" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_PK1" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="PK1" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_PK2" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="PK2" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_Value" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="Value" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="AnsiString" Direction="Input" ParameterName="@Original_Value" Precision="0" ProviderType="VarChar" Scale="0" Size="0" SourceColumn="Value" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="PK1" DataSetColumn="PK1" />
              <Mapping SourceColumn="PK2" DataSetColumn="PK2" />
              <Mapping SourceColumn="Value" DataSetColumn="Value" />
            </Mappings>
            <Sources>
              <DbSource ConnectionRef="TestDBConnectionString (Settings)" DbObjectName="" DbObjectType="Unknown" GenerateShortCommands="true" GeneratorSourceName="DeleteQuery" Modifier="Public" Name="DeleteQuery" QueryType="NoData" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy" UserSourceName="DeleteQuery">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>DELETE FROM TestTable
WHERE        (PK1 = @Original_PK1)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="Original_PK1" ColumnName="PK1" DataSourceName="TestDB.dbo.TestTable" DataTypeServer="int" DbType="Int32" Direction="Input" ParameterName="@Original_PK1" Precision="0" ProviderType="Int" Scale="0" Size="4" SourceColumn="PK1" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
              </DbSource>
            </Sources>
          </TableAdapter>
        </Tables>
        <Sources />
      </DataSource>
    </xs:appinfo>
  </xs:annotation>
  <xs:element name="DataSet1" msdata:IsDataSet="true" msdata:UseCurrentLocale="true" msprop:EnableTableAdapterManager="true" msprop:Generator_UserDSName="DataSet1" msprop:Generator_DataSetName="DataSet1">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="TestTable" msprop:Generator_RowEvHandlerName="TestTableRowChangeEventHandler" msprop:Generator_RowDeletedName="TestTableRowDeleted" msprop:Generator_RowDeletingName="TestTableRowDeleting" msprop:Generator_RowEvArgName="TestTableRowChangeEvent" msprop:Generator_TablePropName="TestTable" msprop:Generator_RowChangedName="TestTableRowChanged" msprop:Generator_RowChangingName="TestTableRowChanging" msprop:Generator_TableClassName="TestTableDataTable" msprop:Generator_RowClassName="TestTableRow" msprop:Generator_TableVarName="tableTestTable" msprop:Generator_UserTableName="TestTable">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="PK1" msprop:Generator_ColumnPropNameInRow="PK1" msprop:Generator_ColumnPropNameInTable="PK1Column" msprop:Generator_ColumnVarNameInTable="columnPK1" msprop:Generator_UserColumnName="PK1" type="xs:int" />
              <xs:element name="PK2" msprop:Generator_ColumnPropNameInRow="PK2" msprop:Generator_ColumnPropNameInTable="PK2Column" msprop:Generator_ColumnVarNameInTable="columnPK2" msprop:Generator_UserColumnName="PK2" type="xs:int" />
              <xs:element name="Value" msprop:Generator_ColumnPropNameInRow="Value" msprop:Generator_ColumnPropNameInTable="ValueColumn" msprop:Generator_ColumnVarNameInTable="columnValue" msprop:Generator_UserColumnName="Value" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="50" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
    <xs:unique name="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:TestTable" />
      <xs:field xpath="mstns:PK1" />
      <xs:field xpath="mstns:PK2" />
    </xs:unique>
  </xs:element>
</xs:schema>